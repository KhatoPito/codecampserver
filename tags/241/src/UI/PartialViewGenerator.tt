<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ template hostspecific="True" #> 
using System.Web.Mvc;
using System.Web.Mvc.Html;
namespace CodeCampServer.UI
{
//Warning.. This file is automatically generated by the TT template. 
//DO NOT EDIT THIS FILE.  You have been Warned!
<# 
string BaseDir = Host.ResolvePath(@".\views\"); 
// Thanks Oleg Sych for suggestion - how to resolve relative paths and not to hardcode Base Directory path for code generation
#>
<#=GetPagesClass(BaseDir)#>
}

<#+
        public static string GetPagesClass(string BaseDir)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("\tpublic static class PartialViews");
            sb.AppendLine("\t{");
            DirectoryInfo di = new DirectoryInfo(BaseDir);
            GetClasses(di, sb, 2, "~/");
            sb.AppendLine("\t}");
            return sb.ToString();
        }

        public static void GetClasses(DirectoryInfo di, StringBuilder sb, int ident, string curDir)
        {
            string identString = "";
            for (int i = 0; i < ident; i++) identString += "\t";
            if (di.GetFiles("*.ascx", SearchOption.AllDirectories).Length > 0)
            {
                foreach (DirectoryInfo diCh in di.GetDirectories())
                {
                    if (diCh.GetFiles("*.ascx", SearchOption.AllDirectories).Length > 0)
                    {
                        int nextIdent = ident + 1;
                        string nextDir = String.Concat(curDir, diCh.Name.ToLower(), "/");
                        sb.Append(identString);
                        sb.AppendLine(String.Format("public static class {0}", diCh.Name));
                        sb.Append(identString);
                        sb.AppendLine("{");
                        foreach (FileInfo fi in diCh.GetFiles("*.ascx", SearchOption.TopDirectoryOnly))
                        {
                            sb.Append(identString);
                           
                            sb.AppendLine(String.Format("\tpublic const string {0} = \"{0}\";", Path.GetFileNameWithoutExtension(fi.Name), String.Concat(nextDir, fi.Name)));                            
                            
                        }
                        GetClasses(diCh, sb, nextIdent, nextDir);
                        sb.Append(identString);
                        sb.AppendLine("}");
                    }
                }
            }
        }
#>