<#@ template language="C#" HostSpecific="True" debug="true" #>
<#@ output extension="cs" #>
<#
	string solutionNamespace = projectDefaultNamespace.Replace(".UI",""); 
	string controllerNamespace = projectDefaultNamespace + ".Controllers";

	string entityName = model.Name.Replace("Form","");
	string controllerClassName = entityName + "Controller";
	string unitTestClassName = controllerClassName + "Tester";
	
	OutputFilePath = String.Format(@"{1}Controllers\{0}.temp.cs",controllerClassName,projectDirectory);
#>
using System.Collections.Generic;
using System.Web.Mvc;
using <#=solutionNamespace#>.Core.Domain;
using <#=solutionNamespace#>.Core.Domain.Model;
using <#=solutionNamespace#>.UI.Helpers.Filters;
using <#=solutionNamespace#>.UI.Helpers.Mappers;
using <#=solutionNamespace#>.UI.Models.Forms;


namespace <#= controllerNamespace #>
{
	[RequiresConferenceFilterAttribute]
	public class <#= controllerClassName  #> : SaveController<Conference, <#= model.Name #>>
	{
		private readonly I<#= entityName #>Mapper _mapper;
		private readonly IConferenceRepository _repository;

		public <#=controllerClassName #>(I<#= entityName #>Mapper mapper, IConferenceRepository repository) : base(repository, mapper)
		{
			_mapper = mapper;
			_repository = repository;
		}

		public ViewResult New(Conference conference)
		{
			var model = new <#= model.Name #> {ConferenceID = conference.Id};
			return View("Edit", model);
		}

		[AutoMappedToModelFilter(typeof (<#= entityName #>[]), typeof (<#= model.Name #>[]))]
		public ViewResult Index(Conference conference)
		{
			<#= entityName #>[] attendees = conference.GetAttendees();
			ViewData.Add(attendees);
			return View();
		}


		[ValidateModel(typeof(<#= model.Name #>))]
		public ActionResult Save([Bind(Prefix = "")]<#= model.Name #> form)
		{
			return ProcessSave(form, () => RedirectToAction<<#= entityName #>Controller>(c => c.List()));
		}

		protected override IDictionary<string, string[]> GetFormValidationErrors(<#= model.Name #> form)
		{
			var result = new ValidationResult();
			throw new Exception("add validation here");
			return result.GetAllErrors();
		}

	}
}}


