Index: src/NHibernate.Test/DriverTest/OracleDataClientDriverFixture.cs
===================================================================
--- src/NHibernate.Test/DriverTest/OracleDataClientDriverFixture.cs	(revision 3734)
+++ src/NHibernate.Test/DriverTest/OracleDataClientDriverFixture.cs	(working copy)
@@ -4,6 +4,7 @@
 using NHibernate.SqlCommand;
 using NHibernate.SqlTypes;
 using NUnit.Framework;
+using NUnit.Framework.SyntaxHelpers;
 
 namespace NHibernate.Test.DriverTest
 {
@@ -19,19 +20,39 @@
 		[Explicit]
 		public void NoBooleanParameters()
 		{
-			OracleDataClientDriver driver = new OracleDataClientDriver();
+			var driver = new OracleDataClientDriver();
 
-			SqlStringBuilder builder = new SqlStringBuilder();
+			var builder = new SqlStringBuilder();
 			builder.Add("select * from table1 where col1=");
 			builder.Add(Parameter.Placeholder);
 
 			IDbCommand cmd =
-				driver.GenerateCommand(CommandType.Text, builder.ToSqlString(), new SqlType[] {SqlTypeFactory.Boolean});
+				driver.GenerateCommand(CommandType.Text, builder.ToSqlString(), new[] {SqlTypeFactory.Boolean});
 
-			IDbDataParameter param = cmd.Parameters[0] as IDbDataParameter;
+			var param = cmd.Parameters[0] as IDbDataParameter;
 
-			Assert.AreEqual("col1", param.ParameterName, "kept same param name");
-			Assert.IsFalse(param.DbType == DbType.Boolean, "should not still be a DbType.Boolean");
+			Assert.AreEqual(":p0", param.ParameterName, "kept same param name");
+			Assert.That(param.DbType, Is.EqualTo(DbType.Int16), "should not still be a DbType.Boolean");
 		}
+
+		[Test]
+		[Category("ODP.NET")]
+		[Explicit]
+		public void NoGuidParameters()
+		{
+			var driver = new OracleDataClientDriver();
+
+			var builder = new SqlStringBuilder();
+			builder.Add("select * from table1 where col1=");
+			builder.Add(Parameter.Placeholder);
+
+			IDbCommand cmd =
+				driver.GenerateCommand(CommandType.Text, builder.ToSqlString(), new[] {SqlTypeFactory.Guid});
+
+			var param = cmd.Parameters[0] as IDbDataParameter;
+
+			Assert.AreEqual(":p0", param.ParameterName, "kept same param name");
+			Assert.That(param.DbType, Is.EqualTo(DbType.Binary), "should be DbType.Binary");
+		}
 	}
 }
\ No newline at end of file
Index: src/NHibernate.Test/NHibernate.Test-3.5.csproj
===================================================================
--- src/NHibernate.Test/NHibernate.Test-3.5.csproj	(revision 3734)
+++ src/NHibernate.Test/NHibernate.Test-3.5.csproj	(working copy)
@@ -2,7 +2,7 @@
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProductVersion>9.0.30729</ProductVersion>
+    <ProductVersion>9.0.21022</ProductVersion>
     <SchemaVersion>2.0</SchemaVersion>
     <ProjectGuid>{7AEE5B37-C552-4E59-9B6F-88755BCB5070}</ProjectGuid>
     <OutputType>Library</OutputType>
@@ -65,6 +65,9 @@
       <SpecificVersion>False</SpecificVersion>
       <HintPath>..\..\lib\net\2.0\nunit.framework.dll</HintPath>
     </Reference>
+    <Reference Include="Oracle.DataAccess, Version=10.2.0.100, Culture=neutral, PublicKeyToken=89b483f429c47342">
+      <Private>True</Private>
+    </Reference>
     <Reference Include="System" />
     <Reference Include="System.configuration" />
     <Reference Include="System.Data" />
Index: src/NHibernate.Test/TypesTest/GuidTypeFixture.cs
===================================================================
--- src/NHibernate.Test/TypesTest/GuidTypeFixture.cs	(revision 3734)
+++ src/NHibernate.Test/TypesTest/GuidTypeFixture.cs	(working copy)
@@ -24,10 +24,10 @@
 		[Test]
 		public void Equals()
 		{
-			GuidType type = (GuidType)NHibernateUtil.Guid;
+			var type = (GuidType) NHibernateUtil.Guid;
 
-			Guid lhs = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
-			Guid rhs = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
+			var lhs = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
+			var rhs = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
 			Assert.IsTrue(type.IsEqual(lhs, rhs));
 
 			rhs = new Guid("{11234567-abcd-abcd-abcd-0123456789ab}");
@@ -38,9 +38,9 @@
 		[Test]
 		public void ReadWrite()
 		{
-			Guid val = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
+			var val = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
 
-			GuidClass basic = new GuidClass();
+			var basic = new GuidClass();
 			basic.Id = 1;
 			basic.GuidValue = val;
 
@@ -50,7 +50,7 @@
 			s.Close();
 
 			s = OpenSession();
-			basic = (GuidClass)s.Load(typeof(GuidClass), 1);
+			basic = (GuidClass) s.Load(typeof (GuidClass), 1);
 
 			Assert.AreEqual(val, basic.GuidValue);
 
@@ -62,8 +62,8 @@
 		[Test]
 		public void GuidInWhereClause()
 		{
-			Guid val = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
-			GuidClass basic = new GuidClass();
+			var val = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
+			var basic = new GuidClass();
 
 			using (ISession s = OpenSession())
 			{
@@ -76,9 +76,9 @@
 
 			using (ISession s = OpenSession())
 			{
-				basic = (GuidClass)s.CreateCriteria(typeof(GuidClass))
-														.Add(Expression.Eq("GuidValue", val))
-														.UniqueResult();
+				basic = (GuidClass) s.CreateCriteria(typeof (GuidClass))
+				                    	.Add(Restrictions.Eq("GuidValue", val))
+				                    	.UniqueResult();
 
 				Assert.IsNotNull(basic);
 				Assert.AreEqual(1, basic.Id);
@@ -89,26 +89,26 @@
 			}
 		}
 
-	    [Test]
-	    public void GetGuidWorksWhenUnderlyingTypeIsRepresentedByString()
-	    {
-            GuidType type = (GuidType)NHibernateUtil.Guid;
+		[Test]
+		public void GetGuidWorksWhenUnderlyingTypeIsRepresentedByString()
+		{
+			var type = (GuidType) NHibernateUtil.Guid;
 
-	        Guid value = Guid.NewGuid();
-            DataTable data = new DataTable("test");
-            data.Columns.Add("guid", typeof(Guid));
-            data.Columns.Add("varchar", typeof(string));
-            DataRow row = data.NewRow();
-            row["guid"] = value;
-            row["varchar"] = value.ToString();
-            data.Rows.Add(row);
-            IDataReader reader = data.CreateDataReader();
-            reader.Read();
+			Guid value = Guid.NewGuid();
+			var data = new DataTable("test");
+			data.Columns.Add("guid", typeof (Guid));
+			data.Columns.Add("varchar", typeof (string));
+			DataRow row = data.NewRow();
+			row["guid"] = value;
+			row["varchar"] = value.ToString();
+			data.Rows.Add(row);
+			IDataReader reader = data.CreateDataReader();
+			reader.Read();
 
-            Assert.AreEqual(value, type.Get(reader, "guid"));
-            Assert.AreEqual(value, type.Get(reader, 0));
-            Assert.AreEqual(value, type.Get(reader, "varchar"));
-            Assert.AreEqual(value, type.Get(reader, 1));
-	    }
+			Assert.AreEqual(value, type.Get(reader, "guid"));
+			Assert.AreEqual(value, type.Get(reader, 0));
+			Assert.AreEqual(value, type.Get(reader, "varchar"));
+			Assert.AreEqual(value, type.Get(reader, 1));
+		}
 	}
 }
\ No newline at end of file
Index: src/NHibernate/AdoNet/AbstractBatcher.cs
===================================================================
--- src/NHibernate/AdoNet/AbstractBatcher.cs	(revision 3734)
+++ src/NHibernate/AdoNet/AbstractBatcher.cs	(working copy)
@@ -1,5 +1,6 @@
 using System;
 using System.Data;
+using System.Runtime.Remoting.Metadata.W3cXsd2001;
 using System.Text;
 using Iesi.Collections.Generic;
 using log4net;
@@ -17,7 +18,7 @@
 	/// </summary>
 	public abstract class AbstractBatcher : IBatcher
 	{
-		protected static readonly ILog log = LogManager.GetLogger(typeof(AbstractBatcher));
+		protected static readonly ILog log = LogManager.GetLogger(typeof (AbstractBatcher));
 		protected static readonly ILog logSql = LogManager.GetLogger("NHibernate.SQL");
 
 		private static int openCommandCount;
@@ -130,7 +131,7 @@
 			bool forceCommandRecreate = batchCommand == null || string.IsNullOrEmpty(batchCommand.CommandText);
 			/****************************************/
 			if (sql.Equals(batchCommandSql) &&
-				ArrayHelper.ArrayEquals(parameterTypes, batchCommandParameterTypes) && !forceCommandRecreate)
+			    ArrayHelper.ArrayEquals(parameterTypes, batchCommandParameterTypes) && !forceCommandRecreate)
 			{
 				if (log.IsDebugEnabled)
 				{
@@ -322,7 +323,7 @@
 			// An example of it's use is the management of generated ID.
 			if (reader != null)
 			{
-				ResultSetWrapper rsw = reader as ResultSetWrapper;
+				var rsw = reader as ResultSetWrapper;
 				readersToClose.Remove(rsw == null ? reader : rsw.Target);
 				CloseDataReader(reader);
 			}
@@ -365,11 +366,7 @@
 		/// calling the session's SetBatchSize.
 		/// </summary>
 		/// <value>The size of the batch.</value>
-		public abstract int BatchSize
-		{
-			get;
-			set;
-		}
+		public abstract int BatchSize { get; set; }
 
 		/// <summary>
 		/// Adds the expected row count into the batch.
@@ -427,7 +424,7 @@
 			}
 			else
 			{
-				StringBuilder output = new StringBuilder();
+				var output = new StringBuilder();
 				output.Append(command.CommandText);
 				output.Append("; ");
 
@@ -436,8 +433,28 @@
 				for (int i = 0; i < count; i++)
 				{
 					p = (IDataParameter) command.Parameters[i];
-					output.Append(string.Format("{0} = '{1}'", p.ParameterName, p.Value));
 
+					object dataValue = p.Value;
+
+					if (p.DbType == DbType.Binary)
+					{
+						if (p.Value == DBNull.Value)
+						{
+							dataValue = GetBinaryString(new byte[16]);
+						}
+						else
+						{
+							var byteValue = (byte[]) p.Value;
+
+							if (byteValue.Length == 16)
+							{
+								dataValue = GetBinaryString(byteValue);
+							}
+						}
+					}
+
+					output.Append(string.Format("{0} = '{1}'", p.ParameterName, dataValue));
+
 					if (i + 1 < count)
 					{
 						output.Append(", ");
@@ -448,6 +465,11 @@
 			return outputText;
 		}
 
+		private static string GetBinaryString(byte[] byteValue)
+		{
+			return new SoapHexBinary(byteValue).ToString();
+		}
+
 		private void LogOpenPreparedCommand()
 		{
 			if (log.IsDebugEnabled)
@@ -595,4 +617,4 @@
 			return sql;
 		}
 	}
-}
+}
\ No newline at end of file
Index: src/NHibernate/Dialect/Oracle9Dialect.cs
===================================================================
--- src/NHibernate/Dialect/Oracle9Dialect.cs	(revision 3734)
+++ src/NHibernate/Dialect/Oracle9Dialect.cs	(working copy)
@@ -55,7 +55,7 @@
 			// having problems with both ODP and OracleClient from MS not being able
 			// to read values out of a field that is DOUBLE PRECISION
 			RegisterColumnType(DbType.Double, "DOUBLE PRECISION"); //"FLOAT(53)" );
-			//RegisterColumnType(DbType.Guid, "CHAR(38)");
+			RegisterColumnType(DbType.Guid, "RAW(16)");
 			RegisterColumnType(DbType.Int16, "NUMBER(5,0)");
 			RegisterColumnType(DbType.Int32, "NUMBER(10,0)");
 			RegisterColumnType(DbType.Int64, "NUMBER(20,0)");
@@ -244,4 +244,4 @@
 			return new OracleDataBaseSchema(connection);
 		}
 	}
-}
\ No newline at end of file
+}
Index: src/NHibernate/Driver/OracleDataClientDriver.cs
===================================================================
--- src/NHibernate/Driver/OracleDataClientDriver.cs	(revision 3734)
+++ src/NHibernate/Driver/OracleDataClientDriver.cs	(working copy)
@@ -52,13 +52,20 @@
 		/// </remarks>
 		protected override void InitializeParameter(IDbDataParameter dbParam, string name, SqlType sqlType)
 		{
-			// if the parameter coming in contains a boolean then we need to convert it 
-			// to another type since ODP.NET doesn't support DbType.Boolean
-			if (sqlType.DbType == DbType.Boolean)
-			{
-				sqlType = SqlTypeFactory.Int16;
-			}
-			base.InitializeParameter(dbParam, name, sqlType);
+			// if the parameter coming in contains a boolean or guid then we need to convert it 
+			// to another type since ODP.NET doesn't support DbType.Boolean or DbType.Guid
+            switch (sqlType.DbType)
+            {
+                case (DbType.Boolean):
+                    sqlType = SqlTypeFactory.Int16;
+                    break;
+
+                case (DbType.Guid):
+                    sqlType = SqlTypeFactory.GetBinary(16);
+                    break;
+            }
+
+		    base.InitializeParameter(dbParam, name, sqlType);
 		}
 
 		#region IEmbeddedBatcherFactoryProvider Members
Index: src/NHibernate/Type/GuidType.cs
===================================================================
--- src/NHibernate/Type/GuidType.cs	(revision 3734)
+++ src/NHibernate/Type/GuidType.cs	(working copy)
@@ -28,10 +28,9 @@
             {
                 return rs.GetGuid(index);
             }
-            else
-            {
-                return new Guid(Convert.ToString(rs[index]));
-            }
+
+            return (rs.GetFieldType(index) == typeof(byte[])) ?
+                new Guid((byte[])rs[index]) : new Guid(Convert.ToString(rs[index]));
 		}
 
 		/// <summary>
@@ -53,7 +52,9 @@
 
 		public override void Set(IDbCommand cmd, object value, int index)
 		{
-			((IDataParameter)cmd.Parameters[index]).Value = value;
+            ((IDataParameter)cmd.Parameters[index]).Value =
+                (((IDbDataParameter)cmd.Parameters[index]).DbType == DbType.Binary) ?
+                    new Guid(value.ToString()).ToByteArray() : value;
 		}
 
 		/// <summary></summary>
@@ -87,4 +88,4 @@
 			return "'" + value + "'";
 		}
 	}
-}
\ No newline at end of file
+}
