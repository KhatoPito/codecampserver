<#@ template language="C#" HostSpecific="True" debug="true" #>
<#@ output extension="cs" #>
<#
	
	string entityName = model.Name.Replace("Form","");
	string controllerClassName = entityName + "Controller";
	string unitTestClassName = controllerClassName + "Tester";
	string solutionNamespace = projectDefaultNamespace.Replace(".UI","");
	string unitTestNamespace = projectDefaultNamespace.Replace(".UI","") + ".UnitTests.UI.Controllers";
	OutputFilePath = String.Format(@"{1}..\UnitTests\UI\Controllers\{0}.cs",unitTestClassName,projectDirectory);
#>
using System;
using System.Web.Mvc;
using <#=solutionNamespace#>.Core.Domain;
using <#=solutionNamespace#>.Core.Domain.Model;
using <#=solutionNamespace#>.Infrastructure.UI.Services.Impl;
using <#=solutionNamespace#>.UI.Controllers;
using <#=solutionNamespace#>.UI.Helpers.Mappers;
using <#=solutionNamespace#>.UI.Models.Forms;
using MvcContrib.TestHelper;
using NBehave.Spec.NUnit;
using NUnit.Framework;
using Rhino.Mocks;
namespace <#=unitTestNamespace#>
{
	public class <#= unitTestClassName #> : SaveControllerTester
	{
        [Test]
        public void Index_should_list_the_<#= entityName #>()
        {
            var controller = new <#= controllerClassName #>(S<I<#= entityName #>Repository>(), S<I<#= entityName #>Mapper>());
            ViewResult result = controller.Index();
        }

        [Test]
        public void When_new_<#= entityName #>_is_saved_Should_map_from_form_and_call_repository()
        {
            var form = new <#= model.Name #>
            {
                Id = Guid.Empty,
            };

            var entity = new <#= entityName #>();
            var mapper = S<I<#= entityName #>Mapper>();
            mapper.Stub(m => m.Map(form)).Return(entity);

            var controller = new <#= controllerClassName #>(S<I<#= entityName #>Repository>(), mapper);
            var result = controller.Save(form);
            result.AssertActionRedirect();
        }

        [Test]
        public void New_should_render_the_edit_view()
        {
            //Arrange
             new <#= controllerClassName #>(S<I<#= entityName #>Repository>(), S<I<#= entityName #>Mapper>())
            //Act
            .New()

             //Assert
            .ForView("Edit")
            .ModelShouldBe<<#= model.Name #>>();
        }

        [Test]
        public void Save_should_update_an_existing_<#= entityName #>()
        {
            var entity = new <#= entityName #> { Id = Guid.NewGuid() };
            var mapper = S<I<#= entityName #>Mapper>();
            var form = new <#= model.Name #> { Id = entity.Id};
            mapper.Stub(u => u.Map(form)).Return(entity);
            var repository = S<I<#= entityName #>Repository>();
            var controller = new <#= controllerClassName #>(repository, mapper);

            var result = (RedirectToRouteResult)controller.Save(form);

            repository.AssertWasCalled(r => r.Save(entity));
            result.AssertActionRedirect().ToAction<<#= controllerClassName #>>(a => a.Index());
        }
	}}