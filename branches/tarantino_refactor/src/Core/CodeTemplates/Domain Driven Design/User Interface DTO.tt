<#@ import namespace="System.Text" #>
<#@ template language="C#" HostSpecific="True" debug="true" #>
<#@ output extension="cs" #>
<#
	string solutionNamespace = projectDefaultNamespace.Replace(".Core",""); 

	string entityName = model.Name + "Form";
	string className = entityName;
	
	OutputFilePath = String.Format(@"{1}..\UI\Models\Forms\{0}.cs",className,projectDirectory);
#>

using System;
using <#=solutionNamespace#>.Core;
using <#=solutionNamespace#>.Core.Domain.Model;
using <#=solutionNamespace#>.UI.Helpers.Validation.Attributes;
using <#=solutionNamespace#>.UI.Models.Validation.Attributes;

namespace <#=solutionNamespace#>.UI.Models.Forms
{
	public class <#= className #>  : ValueObject<<#= className #>>
	{
		public virtual Guid? <#=model.Name#>ID { get; set; }

<# foreach(ModelProperty property in model.Properties) 
{#>
		[BetterValidateNonEmpty("<#= GetUiName(property.Name) #>")]
		public virtual <#=GetType(property.ModelType)#> <#= property.Name #> { get; set; }

<# } #>
	}
}

<#+ 

public string GetType(ModelType modelType)
{
	if(modelType.Namespace.Equals("System"))
	{
		return "string";
	}
	return modelType.Name;
}

public string GetUiName(string propertyName)
{
	if (2 > propertyName.Length)
	{
		return propertyName;
	}
 
	StringBuilder sb = new StringBuilder();
	char[] ca = propertyName.ToCharArray();
	sb.Append(ca[0]);
	for (int i = 1; i < ca.Length - 1; i++)
	{
		char c = ca[i];
		if (char.IsUpper(c) && (char.IsLower(ca[i + 1]) || char.IsLower(ca[i - 1])))
		{
			sb.Append(' ');
		}
		sb.Append(c);
	}
	sb.Append(ca[ca.Length - 1]);
	return sb.ToString();}

 #>