<#@ template language="C#" HostSpecific="True" debug="true" #>
<#@ output extension="cs" #>
<#
	string solutionNamespace = projectDefaultNamespace.Replace(".UI",""); 
	string controllerNamespace = projectDefaultNamespace + ".Controllers";

	string entityName = model.Name.Replace("Form","");
	string controllerClassName = entityName + "Controller";
	
	OutputFilePath = String.Format(@"{1}Controllers\{0}.cs",controllerClassName,projectDirectory);
#>
using System.Collections.Generic;
using System.Web.Mvc;
using <#=solutionNamespace#>.Core.Domain;
using <#=solutionNamespace#>.Core.Domain.Model;
using <#=solutionNamespace#>.UI.Helpers.Filters;
using <#=solutionNamespace#>.UI.Helpers.Mappers;
using <#=solutionNamespace#>.UI.Models.Forms;


namespace <#= controllerNamespace #>
{
    public class <#= controllerClassName #> : SaveController<<#= entityName #>, <#= model.Name #>>
    {
        private readonly I<#= entityName #>Repository _repository;
        private readonly I<#= entityName #>Mapper _mapper;

        public <#= controllerClassName #>(I<#= entityName #>Repository repository, I<#= entityName #>Mapper mapper)
            : base(repository, mapper)
        {
            _repository = repository;
            _mapper = mapper;
        }

        public ViewResult Edit(<#= entityName #> entity)
        {
           
            <#= model.Name #> form = _mapper.Map(entity);
            return View(form);
        }

        [ValidateInput(false)]
        [ValidateModel(typeof(<#= model.Name #>))]
        public ActionResult Save(<#= model.Name #> form)
        {
            return ProcessSave(form, user => RedirectToAction<<#= controllerClassName #>>(c => c.Index()));
        }

        protected override IDictionary<string, string[]> GetFormValidationErrors(<#= model.Name #> form)
        {
            var result = new ValidationResult();
            

            return result.GetAllErrors();
        }



        public ViewResult New()
        {
            return View("Edit", new <#= model.Name #>());
        }

        public ViewResult Index()
        {
            return View(_mapper.Map(_repository.GetAll()));
        }
    }
}


